{"version":3,"sources":["components/MoviesList.js","components/SearchMovies.js","App.js","reportWebVitals.js","index.js"],"names":["MoviesList","_ref","movie","formattedDate","moment","release_date","format","_jsxs","className","children","_jsx","href","concat","id","target","src","poster_path","alt","title","overview","SearchMovies","_useState","useState","_useState2","_slicedToArray","query","setQuery","_useState3","_useState4","movies","setMovies","_useState5","_useState6","searching","setSearching","_useState7","_useState8","message","setMessage","_useState9","_useState10","pageCount","setPageCount","_useState11","_useState12","currentPage","setcurrentPage","_useState13","_useState14","isDirty","setDirty","searchMovies","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","url","res","data","wrap","_context","prev","next","preventDefault","fetch","sent","json","results","length","total_pages","t0","console","error","stop","_x","apply","arguments","_Fragment","onSubmit","type","name","placeholder","value","onChange","disabled","Loader","color","height","width","filter","map","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"oRAuBeA,MApBf,SAAmBC,GAAa,IAAVC,EAAKD,EAALC,MACdC,EAAgBC,IAAOF,EAAMG,cAAcC,OAAO,gBACtD,OACIC,eAAA,OAAKC,UAAU,aAAYC,SAAA,CACvBC,cAAA,KAAGC,KAAI,oCAAAC,OAAsCV,EAAMW,GAAE,mBAAmBC,OAAO,SAAQL,SACnFC,cAAA,OAAKF,UAAU,mBACXO,IAAG,kDAAAH,OAAoDV,EAAMc,aAC7DC,IAAKf,EAAMgB,MAAQ,cAG3BX,eAAA,OAAKC,UAAU,qBAAoBC,SAAA,CAC/BC,cAAA,MAAIF,UAAU,mBAAkBC,SAAEP,EAAMgB,QACxCR,cAAA,KAAGF,UAAU,OAAMC,SAAEN,IACrBO,cAAA,KAAGF,UAAU,kBAAiBC,SAAEP,EAAMiB,gBAKtD,ECjBe,SAASC,IAGpB,IAAAC,EAA0BC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA/BI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAEtBI,EAA4BL,mBAAS,IAAGM,EAAAJ,YAAAG,EAAA,GAAjCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAExBG,EAAkCT,oBAAS,GAAMU,EAAAR,YAAAO,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAE9BG,EAA8Bb,mBAAS,MAAKc,EAAAZ,YAAAW,EAAA,GAArCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAE1BG,EAAkCjB,mBAAS,GAAEkB,EAAAhB,YAAAe,EAAA,GAAtCE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAE9BG,EAAsCrB,mBAAS,GAAEsB,EAAApB,YAAAmB,EAAA,GAA1CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAElCG,EAA4BzB,oBAAS,GAAM0B,EAAAxB,YAAAuB,EAAA,GAApCE,EAAOD,EAAA,GAAEE,EAAQF,EAAA,GAOlBG,EAAY,eAAAlD,EAAAmD,YAAAC,cAAAC,MAAG,SAAAC,EAAOC,GAAC,IAAAC,EAAAC,EAAAC,EAAA,OAAAN,cAAAO,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAIuH,OAHhJP,EAAEQ,iBACFlB,EAAeD,EAAY,GAC3BX,GAAa,GACPuB,EAAG,2GAAA7C,OAA8Ga,EAAK,UAAAb,OAASiC,EAAW,wBAAAgB,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAG1HE,MAAMR,GAAK,KAAD,EAAnB,OAAHC,EAAGG,EAAAK,KAAAL,EAAAE,KAAA,GACUL,EAAIS,OAAO,KAAD,IAAvBR,EAAIE,EAAAK,MACDE,SAAWT,EAAKS,QAAQC,OAAS,GACtC/B,EAAW,MACXR,EAAU6B,EAAKS,SACf1B,EAAaiB,EAAKW,cAGlBhC,EAAW,kCAAqCb,GAEpDyB,GAAS,GACThB,GAAa,GAAO2B,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAU,GAAAV,EAAA,SAEpBW,QAAQC,MAAKZ,EAAAU,IACbrB,GAAS,GACThB,GAAa,GACbI,EAAW,gCAA+B,yBAAAuB,EAAAa,OAAA,GAAAnB,EAAA,mBAEjD,gBAzBiBoB,GAAA,OAAA1E,EAAA2E,MAAA,KAAAC,UAAA,KAoClB,OACItE,eAAAuE,WAAA,CAAArE,SAAA,CACIF,eAAA,OAAKC,UAAU,SAAQC,SAAA,CACnBC,cAAA,MAAIF,UAAU,QAAOC,SAAC,gCACtBF,eAAA,QAAMC,UAAU,OAAOuE,SAAU5B,EAAa1C,SAAA,CAC1CC,cAAA,SAAOF,UAAU,QAAQwE,KAAK,OAAOC,KAAK,QACtCC,YAAY,4BACZC,MAAO1D,EAAO2D,SAbd,SAAC5B,GACjB9B,EAAS8B,EAAE1C,OAAOqE,OAClBjC,GAAS,GACTJ,EAAe,EACnB,IAWgBpC,cAAA,UAAQF,UAAU,SAAS6E,UAAW5D,IAAUwB,EAAS+B,KAAK,SAAQvE,SAAC,iBAI/EC,cAAA,OAAKF,UAAU,kBAAiBC,SAC3BwB,IAAcI,EAAW3B,cAAA,QAAMF,UAAU,SAAQC,SAACC,cAAC4E,IAAM,CAACN,KAAK,YAAYO,MAAM,UAAUC,OAAQ,IAAKC,MAAO,QAAkBpD,EAAW3B,cAAA,OAAKF,UAAU,UAASC,SAACC,cAAA,MAAAD,SAAK4B,MACvKR,EAAO6D,QAAO,SAAAxF,GAAK,OAAIA,EAAMc,WAAW,IAAE2E,KAAI,SAAAzF,GAAK,OAC/CQ,cAACV,EAAU,CAACE,MAAOA,GAAYA,EAAMW,GAAM,OAGrDoB,GAAwB,MAAXI,GAAmBI,GAAaI,EACvDnC,cAAA,OAAKF,UAAU,cAAaC,SACZC,cAAA,UAAQF,UAAU,OAAOoF,QAASzC,EAAa1C,SAAC,gBAE7D,KAGP,CC1EeoF,MAVf,WACE,OACEnF,cAAA,OAAKF,UAAU,MAAKC,SAClBC,cAAA,OAAKF,UAAU,YAAWC,SACxBC,cAACU,EAAY,OAIrB,ECAe0E,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,SAAAhG,GAAkD,IAA/CiG,EAAMjG,EAANiG,OAAQC,EAAMlG,EAANkG,OAAQC,EAAMnG,EAANmG,OAAQC,EAAMpG,EAANoG,OAAQC,EAAOrG,EAAPqG,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACV,GAEJ,ECJAQ,IAASC,OACP9F,cAAC+F,IAAMC,WAAU,CAAAjG,SACfC,cAACmF,EAAG,MAENc,SAASC,eAAe,SAM1Bd,G","file":"static/js/main.35c6cbfc.chunk.js","sourcesContent":["import React from \"react\";\nimport moment from 'moment'\n\nfunction MoviesList({ movie }) {\n    let formattedDate = moment(movie.release_date).format('MMMM Do YYYY');\n    return (\n        <div className=\"movie-card\">\n            <a href={`https://www.themoviedb.org/movie/${movie.id}?language=en-US`} target=\"_blank\">\n                <img className=\"movie-card-image\"\n                    src={`https://image.tmdb.org/t/p/w94_and_h141_bestv2/${movie.poster_path}`}\n                    alt={movie.title + ' poster'}\n                />\n            </a>\n            <div className=\"movie-card-content\">\n                <h3 className=\"movie-card-title\">{movie.title}</h3>\n                <p className=\"date\">{formattedDate}</p>\n                <p className=\"movie-card-desc\">{movie.overview}</p>\n            </div>\n\n        </div>\n    )\n}\n\nexport default MoviesList;","import React, { useState } from \"react\";\nimport Loader from \"react-loader-spinner\";\nimport MoviesList from \"./MoviesList.js\";\n\nexport default function SearchMovies() {\n\n    //states- input query, movies\n    const [query, setQuery] = useState('');\n    //create the state for movies\n    const [movies, setMovies] = useState([]);\n    //keep track of search operation\n    const [searching, setSearching] = useState(false);\n    //to display the error message\n    const [message, setMessage] = useState(null);\n    //to store total pages  \n    const [pageCount, setPageCount] = useState(0);\n    //to determine current page for paggination\n    const [currentPage, setcurrentPage] = useState(1);\n    //to keep track of input change\n    const [isDirty, setDirty] = useState(false);\n\n\n    /**\n     * search for movies based on the query name\n     * @param e \n     */\n    const searchMovies = async (e) => {\n        e.preventDefault();        \n        setcurrentPage(currentPage+1);\n        setSearching(true);\n        const url = `https://api.themoviedb.org/3/search/movie?api_key=d1217855f38a1bce208570b648feff3f&language=en-US&query=${query}&page=${currentPage}&include_adult=false`;\n\n        try {\n            const res = await fetch(url);\n            const data = await res.json();\n            if (data.results && data.results.length > 0) {\n                setMessage(null);\n                setMovies(data.results);\n                setPageCount(data.total_pages);\n            }\n            else {\n                setMessage('Sorry, no movies found by name ' + {query}.query);\n            }\n            setDirty(false);\n            setSearching(false);\n        } catch (err) {\n            console.error(err);\n            setDirty(false);\n            setSearching(false);\n            setMessage('An unexpected error occured.')\n        }\n    }\n    /**\n     * when there is change in the query than updateQuery method is called\n     * @param  e \n     */\n    const updateQuery = (e) => {\n        setQuery(e.target.value);\n        setDirty(true);\n        setcurrentPage(1);\n    }\n\n    return (\n        <>\n            <div className=\"header\">\n                <h1 className=\"title\">Welcome to Movie Search App</h1>\n                <form className=\"form\" onSubmit={searchMovies}>\n                    <input className=\"input\" type=\"text\" name=\"query\"\n                        placeholder=\"Please enter a movie name\"\n                        value={query} onChange={updateQuery}\n                    />\n                    <button className=\"button\" disabled={!query || !isDirty} type=\"submit\">Search</button>\n                </form>\n            </div>\n\n            <div className=\"movie-card-list\">\n                {searching && !message ? (<span className=\"loader\"><Loader type=\"ThreeDots\" color=\"#00ff00\" height={100} width={100} /></span>) : message ? (<div className=\"message\"><h1>{message}</h1></div>) :\n                    movies.filter(movie => movie.poster_path).map(movie => (\n                        <MoviesList movie={movie} key={movie.id} />\n                    ))}\n            </div>\n            {!searching && message == null && pageCount >= currentPage ? (\n\t\t\t\t<div className=\"button-next\">\n                    <button className=\"next\" onClick={searchMovies}>Next page</button>\n                </div>\n\t\t\t) : \"\"} \n        </>\n    )\n}","import './App.css';\nimport SearchMovies from \"./components/SearchMovies\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <SearchMovies/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}